-- Complete Doors Hack Script v2.8 - FIXED Door ESP + Conservative Chest ESP + LeverForGate
-- Restored Door ESP, made Chest ESP much more specific, added LeverForGate ESP

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Update character references when respawning
player.CharacterAdded:Connect(function(newChar)
    character = newChar
    humanoidRootPart = newChar:WaitForChild("HumanoidRootPart")
end)

-- Clean up existing GUI
pcall(function()
    CoreGui:FindFirstChild("DoorsHackV2"):Destroy()
end)

-- Variables
local espObjects = {}
local connections = {}
local isMinimized = false
local originalLighting = {}
local currentTab = "ESP"

-- Settings with default values
local settings = {
    doorESP = false,
    keyESP = false,
    goldESP = false,
    leverESP = false,
    leverForGateESP = true, -- NEW: Auto-enabled for LeverForGate
    chestESP = false,
    
    -- Item ESP
    lighterESP = false,
    flashlightESP = false,
    crucifixESP = false,
    bookESP = false,
    vitaminESP = false,
    skeletonKeyESP = false,
    lockpickESP = false,
    
    -- Special Items
    batteriesESP = false,
    bandageESP = false,
    
    -- Entity Protection
    antiRush = false,
    antiAmbush = false,
    antiSeek = false,
    antiScreech = false,
    antiEyes = false,
    antiHalt = false,
    entityNotifications = true,
    
    -- Visual
    fullbright = false
}

-- Save/Load Settings Functions
local function saveSettings()
    local success, result = pcall(function()
        writefile("DoorsHackSettings.json", game:GetService("HttpService"):JSONEncode(settings))
    end)
    if success then
        print("Settings saved successfully!")
    else
        warn("Failed to save settings: " .. tostring(result))
    end
end

local function loadSettings()
    local success, result = pcall(function()
        if isfile("DoorsHackSettings.json") then
            local data = readfile("DoorsHackSettings.json")
            local loadedSettings = game:GetService("HttpService"):JSONDecode(data)
            
            -- Merge loaded settings with defaults (in case new settings were added)
            for key, value in pairs(loadedSettings) do
                if settings[key] ~= nil then
                    settings[key] = value
                end
            end
            print("Settings loaded successfully!")
            return true
        end
    end)
    if not success then
        warn("Failed to load settings, using defaults: " .. tostring(result))
    end
    return success
end

-- Load settings on startup
loadSettings()

print("Creating Fixed Doors Hack GUI with Door ESP + Conservative Chest ESP + LeverForGate...")

-- Create main GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "DoorsHackV2"
screenGui.ResetOnSpawn = false
screenGui.Parent = CoreGui

-- Main frame
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 380, 0, 400)
mainFrame.Position = UDim2.new(0.5, -190, 0.5, -200)
mainFrame.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
mainFrame.BorderSizePixel = 2
mainFrame.BorderColor3 = Color3.new(0.3, 0.5, 0.8)
mainFrame.Active = true
mainFrame.Draggable = true
mainFrame.Parent = screenGui

-- Title bar
local titleBar = Instance.new("Frame")
titleBar.Name = "TitleBar"
titleBar.Size = UDim2.new(1, 0, 0, 30)
titleBar.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
titleBar.BorderSizePixel = 0
titleBar.Parent = mainFrame

-- Title text
local titleText = Instance.new("TextLabel")
titleText.Size = UDim2.new(1, -60, 1, 0)
titleText.Position = UDim2.new(0, 5, 0, 0)
titleText.BackgroundTransparency = 1
titleText.Text = "flow hub - Fixed ESP v2.8 + Door + LeverForGate"
titleText.TextColor3 = Color3.new(1, 1, 1)
titleText.TextSize = 10
titleText.Font = Enum.Font.SourceSansBold
titleText.TextXAlignment = Enum.TextXAlignment.Left
titleText.Parent = titleBar

-- Minimize button
local minimizeBtn = Instance.new("TextButton")
minimizeBtn.Size = UDim2.new(0, 25, 0, 25)
minimizeBtn.Position = UDim2.new(1, -55, 0, 2.5)
minimizeBtn.BackgroundColor3 = Color3.new(1, 0.6, 0)
minimizeBtn.BorderSizePixel = 0
minimizeBtn.Text = "-"
minimizeBtn.TextColor3 = Color3.new(1, 1, 1)
minimizeBtn.TextSize = 16
minimizeBtn.Font = Enum.Font.SourceSansBold
minimizeBtn.Parent = titleBar

-- Close button
local closeBtn = Instance.new("TextButton")
closeBtn.Size = UDim2.new(0, 25, 0, 25)
closeBtn.Position = UDim2.new(1, -28, 0, 2.5)
closeBtn.BackgroundColor3 = Color3.new(1, 0.2, 0.2)
closeBtn.BorderSizePixel = 0
closeBtn.Text = "X"
closeBtn.TextColor3 = Color3.new(1, 1, 1)
closeBtn.TextSize = 14
closeBtn.Font = Enum.Font.SourceSansBold
closeBtn.Parent = titleBar

-- Tab buttons frame
local tabFrame = Instance.new("Frame")
tabFrame.Name = "TabFrame"
tabFrame.Size = UDim2.new(1, 0, 0, 35)
tabFrame.Position = UDim2.new(0, 0, 0, 30)
tabFrame.BackgroundColor3 = Color3.new(0.15, 0.15, 0.15)
tabFrame.BorderSizePixel = 0
tabFrame.Parent = mainFrame

-- Tab buttons
local tabs = {"ESP", "Items", "Protection", "Visual"}
local tabButtons = {}

for i, tabName in ipairs(tabs) do
    local tabBtn = Instance.new("TextButton")
    tabBtn.Name = tabName .. "Tab"
    tabBtn.Size = UDim2.new(0.25, -2, 1, -4)
    tabBtn.Position = UDim2.new((i-1) * 0.25, 1, 0, 2)
    tabBtn.BackgroundColor3 = currentTab == tabName and Color3.new(0.3, 0.5, 0.8) or Color3.new(0.2, 0.2, 0.2)
    tabBtn.BorderSizePixel = 0
    tabBtn.Text = tabName
    tabBtn.TextColor3 = Color3.new(1, 1, 1)
    tabBtn.TextSize = 11
    tabBtn.Font = Enum.Font.SourceSansBold
    tabBtn.Parent = tabFrame
    
    tabButtons[tabName] = tabBtn
end

-- Content frame
local contentFrame = Instance.new("ScrollingFrame")
contentFrame.Name = "ContentFrame"
contentFrame.Size = UDim2.new(1, -10, 1, -110)
contentFrame.Position = UDim2.new(0, 5, 0, 70)
contentFrame.BackgroundTransparency = 1
contentFrame.BorderSizePixel = 0
contentFrame.ScrollBarThickness = 6
contentFrame.ScrollBarImageColor3 = Color3.new(0.5, 0.5, 0.5)
contentFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
contentFrame.Parent = mainFrame

-- Layout for content
local layout = Instance.new("UIListLayout")
layout.Padding = UDim.new(0, 5)
layout.SortOrder = Enum.SortOrder.LayoutOrder
layout.Parent = contentFrame

-- Save Settings Button
local saveBtn = Instance.new("TextButton")
saveBtn.Name = "SaveButton"
saveBtn.Size = UDim2.new(1, -10, 0, 30)
saveBtn.Position = UDim2.new(0, 5, 1, -35)
saveBtn.BackgroundColor3 = Color3.new(0.2, 0.7, 0.2)
saveBtn.BorderSizePixel = 0
saveBtn.Text = "ðŸ’¾ Save Settings"
saveBtn.TextColor3 = Color3.new(1, 1, 1)
saveBtn.TextSize = 12
saveBtn.Font = Enum.Font.SourceSansBold
saveBtn.Parent = mainFrame

-- Tab content containers
local tabContents = {}
for _, tabName in ipairs(tabs) do
    tabContents[tabName] = {}
end

-- Function to create toggle buttons
local function createToggle(text, settingKey, color, tabName, order)
    local toggle = Instance.new("Frame")
    toggle.Name = text .. "Toggle"
    toggle.Size = UDim2.new(1, -10, 0, 30)
    toggle.BackgroundColor3 = Color3.new(0.12, 0.12, 0.12)
    toggle.BorderSizePixel = 1
    toggle.BorderColor3 = Color3.new(0.3, 0.3, 0.3)
    toggle.LayoutOrder = order
    toggle.Visible = currentTab == tabName
    toggle.Parent = contentFrame
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -50, 1, 0)
    label.Position = UDim2.new(0, 5, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextSize = 11
    label.Font = Enum.Font.SourceSans
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = toggle
    
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 40, 0, 20)
    button.Position = UDim2.new(1, -45, 0.5, -10)
    button.BackgroundColor3 = settings[settingKey] and color or Color3.new(0.3, 0.3, 0.3)
    button.BorderSizePixel = 0
    button.Text = settings[settingKey] and "ON" or "OFF"
    button.TextColor3 = Color3.new(1, 1, 1)
    button.TextSize = 9
    button.Font = Enum.Font.SourceSansBold
    button.Parent = toggle
    
    button.MouseButton1Click:Connect(function()
        settings[settingKey] = not settings[settingKey]
        button.BackgroundColor3 = settings[settingKey] and color or Color3.new(0.3, 0.3, 0.3)
        button.Text = settings[settingKey] and "ON" or "OFF"
        -- Auto-save settings when changed
        saveSettings()
    end)
    
    table.insert(tabContents[tabName], toggle)
    return toggle
end

-- Function to switch tabs
local function switchTab(tabName)
    currentTab = tabName
    
    -- Update tab button colors
    for name, btn in pairs(tabButtons) do
        btn.BackgroundColor3 = name == tabName and Color3.new(0.3, 0.5, 0.8) or Color3.new(0.2, 0.2, 0.2)
    end
    
    -- Show/hide content
    for _, child in pairs(contentFrame:GetChildren()) do
        if child:IsA("Frame") and child.Name:find("Toggle") then
            child.Visible = false
        end
    end
    
    for _, toggle in pairs(tabContents[tabName]) do
        if toggle and toggle.Parent then
            toggle.Visible = true
        end
    end
    
    -- Update canvas size
    task.wait(0.1)
    local visibleHeight = 0
    for _, toggle in pairs(tabContents[tabName]) do
        if toggle and toggle.Parent and toggle.Visible then
            visibleHeight = visibleHeight + toggle.Size.Y.Offset + 5
        end
    end
    contentFrame.CanvasSize = UDim2.new(0, 0, 0, visibleHeight + 20)
end

-- Connect tab buttons
for tabName, btn in pairs(tabButtons) do
    btn.MouseButton1Click:Connect(function()
        switchTab(tabName)
    end)
end

-- Connect save button
saveBtn.MouseButton1Click:Connect(function()
    saveSettings()
    -- Visual feedback
    local originalText = saveBtn.Text
    saveBtn.Text = "âœ… Saved!"
    saveBtn.BackgroundColor3 = Color3.new(0.1, 0.8, 0.1)
    task.wait(1)
    saveBtn.Text = originalText
    saveBtn.BackgroundColor3 = Color3.new(0.2, 0.7, 0.2)
end)

-- Create toggles organized by tabs
-- ESP Tab - RESTORED Door ESP as first toggle
createToggle("Door ESP", "doorESP", Color3.new(0, 1, 0.4), "ESP", 1)
createToggle("Key ESP", "keyESP", Color3.new(1, 0.84, 0), "ESP", 2)
createToggle("Gold ESP", "goldESP", Color3.new(1, 0.65, 0), "ESP", 3)
createToggle("Lever ESP", "leverESP", Color3.new(0.8, 0.4, 1), "ESP", 4)
createToggle("LeverForGate ESP", "leverForGateESP", Color3.new(1, 0.2, 1), "ESP", 5)
createToggle("Chest ESP", "chestESP", Color3.new(1, 0.4, 0.8), "ESP", 6)

-- Items Tab
createToggle("Lighter ESP", "lighterESP", Color3.new(1, 0.5, 0), "Items", 1)
createToggle("Flashlight ESP", "flashlightESP", Color3.new(1, 1, 0.3), "Items", 2)
createToggle("Crucifix ESP", "crucifixESP", Color3.new(0.9, 0.9, 0.9), "Items", 3)
createToggle("Skeleton Key ESP", "skeletonKeyESP", Color3.new(0.7, 0.7, 0.9), "Items", 4)
createToggle("Lockpick ESP", "lockpickESP", Color3.new(0.6, 0.8, 0.6), "Items", 5)
createToggle("Book ESP", "bookESP", Color3.new(0.4, 0.6, 1), "Items", 6)
createToggle("Vitamin ESP", "vitaminESP", Color3.new(0, 1, 0.6), "Items", 7)
createToggle("Batteries ESP", "batteriesESP", Color3.new(1, 1, 0.5), "Items", 8)
createToggle("Bandage ESP", "bandageESP", Color3.new(1, 0.6, 0.6), "Items", 9)

-- Protection Tab
createToggle("Anti Rush", "antiRush", Color3.new(1, 0.2, 0.2), "Protection", 1)
createToggle("Anti Ambush", "antiAmbush", Color3.new(1, 0.4, 0.2), "Protection", 2)
createToggle("Anti Seek", "antiSeek", Color3.new(0.6, 0, 0.6), "Protection", 3)
createToggle("Anti Screech", "antiScreech", Color3.new(1, 1, 0.2), "Protection", 4)
createToggle("Anti Eyes", "antiEyes", Color3.new(1, 0, 1), "Protection", 5)
createToggle("Anti Halt", "antiHalt", Color3.new(0, 1, 1), "Protection", 6)
createToggle("Entity Notifications", "entityNotifications", Color3.new(0.4, 1, 1), "Protection", 7)

-- Visual Tab
createToggle("Fullbright", "fullbright", Color3.new(1, 1, 0.4), "Visual", 1)

-- Initialize first tab
switchTab("ESP")

-- ESP Functions
local function clearESP()
    for _, obj in pairs(espObjects) do
        if obj and obj.Parent then
            pcall(function() obj:Destroy() end)
        end
    end
    espObjects = {}
end

local function createESP(object, color, text, showText)
    if not object or not object.Parent then return end
    
    pcall(function()
        -- Check if ESP already exists to prevent duplicates
        if object:FindFirstChild("DoorsESP") then return end
        
        local highlight = Instance.new("Highlight")
        highlight.Name = "DoorsESP"
        highlight.Adornee = object
        highlight.FillColor = color
        highlight.FillTransparency = 0.5
        highlight.OutlineColor = Color3.new(1, 1, 1)
        highlight.OutlineTransparency = 0.2
        highlight.Parent = object
        table.insert(espObjects, highlight)
        
        if showText then
            local billboardGui = Instance.new("BillboardGui")
            billboardGui.Name = "DoorsESPLabel"
            billboardGui.Adornee = object
            billboardGui.Size = UDim2.new(0, 100, 0, 25)
            billboardGui.AlwaysOnTop = true
            billboardGui.Parent = object
            
            local textLabel = Instance.new("TextLabel")
            textLabel.Size = UDim2.new(1, 0, 1, 0)
            textLabel.BackgroundColor3 = Color3.new(0, 0, 0)
            textLabel.BackgroundTransparency = 0.3
            textLabel.BorderSizePixel = 0
            textLabel.Text = text
            textLabel.TextColor3 = color
            textLabel.TextSize = 12
            textLabel.Font = Enum.Font.SourceSansBold
            textLabel.Parent = billboardGui
            
            table.insert(espObjects, billboardGui)
        end
    end)
end

-- Fixed door state checking
local function isDoorOpen(door)
    if not door then return false end
    
    -- Check various door state indicators
    local doorModel = door:FindFirstChild("Door")
    if doorModel then
        -- Check if door has been moved from original position
        local hinge = doorModel:FindFirstChild("Hinge")
        if hinge and hinge:IsA("BasePart") then
            -- Check rotation to determine if door is open
            local rotation = hinge.CFrame:ToEulerAnglesXYZ()
            if math.abs(rotation.Y) > 0.5 then
                return true
            end
        end
        
        -- Check for open attribute
        if doorModel:GetAttribute("Opened") or door:GetAttribute("Opened") then
            return true
        end
        
        -- Check for proximity prompt removal (doors remove prompt when opened)
        local prompt = door:FindFirstChild("PromptPart")
        if prompt then
            local proximityPrompt = prompt:FindFirstChildOfClass("ProximityPrompt")
            if not proximityPrompt or not proximityPrompt.Enabled then
                return true
            end
        end
    end
    
    return false
end

-- ENHANCED room scanning with ALL ESP features
local function scanRoom(room)
    if not room then return end
    
    pcall(function()
        -- RESTORED Door ESP with open state checking
        if settings.doorESP then
            local door = room:FindFirstChild("Door")
            if door and not isDoorOpen(door) then
                for _, part in pairs(door:GetDescendants()) do
                    if part.Name == "Door" and part:IsA("BasePart") then
                        createESP(part, Color3.new(0, 1, 0.4), "DOOR", false)
                        break
                    end
                end
            end
        end
        
        -- ORIGINAL Key ESP from v2.1 code (works in chests)
        if settings.keyESP then
            for _, descendant in pairs(room:GetDescendants()) do
                if descendant.Name == "KeyObtain" then
                    local key = descendant:FindFirstChild("Key")
                    if key and key:IsA("BasePart") then
                        createESP(key, Color3.new(1, 0.84, 0), "KEY", true)
                    end
                elseif descendant.Name == "Key" and descendant:IsA("BasePart") and descendant.Size.Magnitude < 5 then
                    createESP(descendant, Color3.new(1, 0.84, 0), "KEY", true)
                end
            end
        end
        
        -- ENHANCED Gold ESP - works in chests like Key ESP
        if settings.goldESP then
            for _, descendant in pairs(room:GetDescendants()) do
                if descendant.Name:find("Gold") and descendant:IsA("BasePart") then
                    createESP(descendant, Color3.new(1, 0.65, 0), "GOLD", true)
                elseif descendant.Name:find("Coin") and descendant:IsA("BasePart") then
                    createESP(descendant, Color3.new(1, 0.65, 0), "GOLD", true)
                elseif descendant.Name == "GoldPile" and descendant:IsA("BasePart") then
                    createESP(descendant, Color3.new(1, 0.65, 0), "GOLD", true)
                elseif (descendant.Name:lower():find("gold") or descendant.Name:lower():find("coin")) and descendant:IsA("BasePart") then
                    createESP(descendant, Color3.new(1, 0.65, 0), "GOLD", true)
                end
            end
        end
        
        -- ENHANCED Lever ESP - general levers
        if settings.leverESP then
            for _, descendant in pairs(room:GetDescendants()) do
                if descendant:IsA("BasePart") then
                    local name = descendant.Name:lower()
                    if name:find("lever") and not name:find("leverforgate") then
                        createESP(descendant, Color3.new(0.8, 0.4, 1), "LEVER", true)
                    end
                end
            end
        end
        
        -- SPECIFIC LeverForGate ESP - ALWAYS SHOWS WHEN AVAILABLE
        if settings.leverForGateESP then
            -- Check for the specific path you mentioned
            local assets = room:FindFirstChild("Assets")
            if assets then
                local leverForGate = assets:FindFirstChild("LeverForGate")
                if leverForGate then
                    local main = leverForGate:FindFirstChild("Main")
                    if main and main:IsA("BasePart") then
                        createESP(main, Color3.new(1, 0.2, 1), "LEVER FOR GATE", true)
                        print("Found LeverForGate in room " .. room.Name .. "!")
                    end
                end
            end
            
            -- Also check for any LeverForGate objects anywhere in the room
            for _, descendant in pairs(room:GetDescendants()) do
                if descendant.Name == "LeverForGate" or descendant.Name:find("LeverForGate") then
                    local main = descendant:FindFirstChild("Main")
                    if main and main:IsA("BasePart") then
                        createESP(main, Color3.new(1, 0.2, 1), "LEVER FOR GATE", true)
                    elseif descendant:IsA("BasePart") then
                        createESP(descendant, Color3.new(1, 0.2, 1), "LEVER FOR GATE", true)
                    end
                end
            end
        end
        
        -- VERY CONSERVATIVE Chest ESP - Only exact matches
        if settings.chestESP then
            for _, descendant in pairs(room:GetDescendants()) do
                if descendant:IsA("BasePart") then
                    local name = descendant.Name:lower()
                    -- ONLY highlight objects with EXACT names to avoid false positives
                    if name == "chest" or name == "drawer" then
                        createESP(descendant, Color3.new(1, 0.4, 0.8), "CHEST", true)
                    end
                elseif descendant:IsA("Model") then
                    local name = descendant.Name:lower()
                    if name == "chest" or name == "drawer" then
                        local targetPart = descendant:FindFirstChildOfClass("BasePart")
                        if targetPart then
                            createESP(targetPart, Color3.new(1, 0.4, 0.8), "CHEST", true)
                        end
                    end
                end
            end
        end
        
        -- Scan all descendants for items with improved detection
        for _, descendant in pairs(room:GetDescendants()) do
            if descendant:IsA("BasePart") or descendant:IsA("Model") then
                local name = descendant.Name:lower()
                
                -- Lighter ESP
                if settings.lighterESP then
                    if name:find("lighter") and descendant:IsA("BasePart") then
                        createESP(descendant, Color3.new(1, 0.5, 0), "LIGHTER", true)
                    end
                end
                
                -- Flashlight ESP
                if settings.flashlightESP then
                    if name:find("flashlight") and descendant:IsA("BasePart") then
                        createESP(descendant, Color3.new(1, 1, 0.3), "FLASHLIGHT", true)
                    end
                end
                
                -- Crucifix ESP
                if settings.crucifixESP then
                    if name:find("crucifix") and descendant:IsA("BasePart") then
                        createESP(descendant, Color3.new(0.9, 0.9, 0.9), "CRUCIFIX", true)
                    end
                end
                
                -- Book ESP
                if settings.bookESP then
                    if name:find("book") and descendant:IsA("BasePart") then
                        createESP(descendant, Color3.new(0.4, 0.6, 1), "BOOK", true)
                    end
                end
                
                -- Vitamin ESP
                if settings.vitaminESP then
                    if name:find("vitamin") and descendant:IsA("BasePart") then
                        createESP(descendant, Color3.new(0, 1, 0.6), "VITAMIN", true)
                    end
                end
                
                -- Skeleton Key ESP
                if settings.skeletonKeyESP then
                    if (name:find("skeleton") and name:find("key")) or name == "skeletonkey" then
                        local targetPart = descendant:IsA("BasePart") and descendant or descendant:FindFirstChildOfClass("BasePart")
                        if targetPart then
                            createESP(targetPart, Color3.new(0.7, 0.7, 0.9), "SKELETON KEY", true)
                        end
                    end
                end
                
                -- Lockpick ESP
                if settings.lockpickESP then
                    if name:find("lockpick") and descendant:IsA("BasePart") then
                        createESP(descendant, Color3.new(0.6, 0.8, 0.6), "LOCKPICK", true)
                    end
                end
                
                -- Batteries ESP
                if settings.batteriesESP then
                    if (name:find("batteries") or name:find("battery")) and descendant:IsA("BasePart") then
                        createESP(descendant, Color3.new(1, 1, 0.5), "BATTERIES", true)
                    end
                end
                
                -- Bandage ESP
                if settings.bandageESP then
                    if name:find("bandage") and descendant:IsA("BasePart") then
                        createESP(descendant, Color3.new(1, 0.6, 0.6), "BANDAGE", true)
                    end
                end
            end
        end
    end)
end

-- FIXED Entity detection with proper protection
local function setupEntityProtection()
    -- Rush/Ambush detection
    connections.rushDetection = Workspace.ChildAdded:Connect(function(child)
        local name = child.Name:lower()
        
        if name:find("rush") or name == "RushMoving" or name == "RushNew" then
            createNotification("RUSH DETECTED! HIDING!", Color3.new(1, 0, 0))
            if settings.antiRush then
                pcall(function()
                    local currentRooms = Workspace:FindFirstChild("CurrentRooms")
                    if currentRooms and humanoidRootPart then
                        local closestHideSpot = nil
                        local closestDistance = math.huge
                        
                        for _, room in pairs(currentRooms:GetChildren()) do
                            if tonumber(room.Name) then
                                for _, descendant in pairs(room:GetDescendants()) do
                                    if descendant.Name:find("Wardrobe") or descendant.Name:find("Closet") then
                                        local distance = (humanoidRootPart.Position - descendant.Position).Magnitude
                                        if distance < closestDistance then
                                            closestDistance = distance
                                            closestHideSpot = descendant
                                        end
                                    end
                                end
                            end
                        end
                        
                        if closestHideSpot then
                            humanoidRootPart.CFrame = closestHideSpot.CFrame + Vector3.new(0, 0, -2)
                        else
                            -- Fallback: teleport high up
                            humanoidRootPart.CFrame = humanoidRootPart.CFrame + Vector3.new(0, 25, 0)
                        end
                    end
                end)
            end
        elseif name:find("ambush") or name == "AmbushMoving" then
            createNotification("AMBUSH DETECTED! HIDING!", Color3.new(1, 0.4, 0))
            if settings.antiAmbush then
                pcall(function()
                    -- Same logic as Rush
                    local currentRooms = Workspace:FindFirstChild("CurrentRooms")
                    if currentRooms and humanoidRootPart then
                        local closestHideSpot = nil
                        local closestDistance = math.huge
                        
                        for _, room in pairs(currentRooms:GetChildren()) do
                            if tonumber(room.Name) then
                                for _, descendant in pairs(room:GetDescendants()) do
                                    if descendant.Name:find("Wardrobe") or descendant.Name:find("Closet") then
                                        local distance = (humanoidRootPart.Position - descendant.Position).Magnitude
                                        if distance < closestDistance then
                                            closestDistance = distance
                                            closestHideSpot = descendant
                                        end
                                    end
                                end
                            end
                        end
                        
                        if closestHideSpot then
                            humanoidRootPart.CFrame = closestHideSpot.CFrame + Vector3.new(0, 0, -2)
                        else
                            humanoidRootPart.CFrame = humanoidRootPart.CFrame + Vector3.new(0, 25, 0)
                        end
                    end
                end)
            end
        elseif name:find("seek") or name == "SeekMoving" then
            createNotification("SEEK DETECTED! MOVING FORWARD!", Color3.new(0.6, 0, 0.6))
            if settings.antiSeek and humanoidRootPart then
                pcall(function()
                    -- Move forward significantly
                    humanoidRootPart.CFrame = humanoidRootPart.CFrame + humanoidRootPart.CFrame.LookVector * 50
                end)
            end
        elseif name:find("halt") or name == "Halt" then
            createNotification("HALT DETECTED! STOPPING!", Color3.new(0, 1, 1))
            if settings.antiHalt and character and character:FindFirstChild("Humanoid") then
                pcall(function()
                    local humanoid = character.Humanoid
                    local originalSpeed = humanoid.WalkSpeed
                    humanoid.WalkSpeed = 0
                    task.wait(5) -- Wait longer for Halt
                    humanoid.WalkSpeed = originalSpeed
                end)
            end
        end
    end)
    
    -- Eyes detection - monitor for Eyes entity and automatically look away
    connections.eyesDetection = RunService.Heartbeat:Connect(function()
        if settings.antiEyes then
            pcall(function()
                -- Check for Eyes entity
                local eyes = Workspace:FindFirstChild("Eyes") or Workspace:FindFirstChild("BackdoorLookman")
                if eyes and humanoidRootPart then
                    createNotification("EYES DETECTED! LOOKING AWAY!", Color3.new(1, 0, 1))
                    -- Immediately turn around
                    local currentCFrame = humanoidRootPart.CFrame
                    local turnAroundCFrame = currentCFrame * CFrame.Angles(0, math.pi, 0)
                    humanoidRootPart.CFrame = turnAroundCFrame
                    
                    -- Also check player GUI for eyes effect
                    local gui = player.PlayerGui:FindFirstChild("MainUI")
                    if gui then
                        local jumpscare = gui:FindFirstChild("Jumpscare_Eyes") or gui:FindFirstChild("Jumpscare")
                        if jumpscare then
                            jumpscare.Visible = false
                        end
                    end
                end
            end)
        end
    end)
    
    -- Screech detection - monitor for screech GUI and auto-click
    connections.screechDetection = RunService.Heartbeat:Connect(function()
        if settings.antiScreech then
            pcall(function()
                local gui = player.PlayerGui:FindFirstChild("MainUI")
                if gui then
                    local screechGui = gui:FindFirstChild("Screech")
                    if screechGui and screechGui.Visible then
                        createNotification("SCREECH DETECTED! AUTO-CLICKING!", Color3.new(1, 1, 0))
                        local imageButton = screechGui:FindFirstChild("ImageButton")
                        if imageButton then
                            -- Multiple click attempts to ensure it works
                            for i = 1, 3 do
                                fireclick(imageButton)
                                task.wait(0.1)
                            end
                        end
                    end
                end
            end)
        end
    end)
end

-- Notification system
local function createNotification(text, color)
    if not settings.entityNotifications then return end
    
    local notification = Instance.new("Frame")
    notification.Size = UDim2.new(0, 200, 0, 40)
    notification.Position = UDim2.new(1, -210, 0, #screenGui:GetChildren() * 45 + 10)
    notification.BackgroundColor3 = color or Color3.new(1, 0.4, 0.4)
    notification.BorderSizePixel = 0
    notification.Parent = screenGui
    
    local notifText = Instance.new("TextLabel")
    notifText.Size = UDim2.new(1, -5, 1, 0)
    notifText.Position = UDim2.new(0, 5, 0, 0)
    notifText.BackgroundTransparency = 1
    notifText.Text = text
    notifText.TextColor3 = Color3.new(1, 1, 1)
    notifText.TextSize = 11
    notifText.Font = Enum.Font.SourceSansBold
    notifText.TextWrapped = true
    notifText.Parent = notification
    
    task.spawn(function()
        task.wait(3)
        pcall(function() notification:Destroy() end)
    end)
end

-- Fullbright function
local function toggleFullbright(enabled)
    if enabled then
        originalLighting.Ambient = Lighting.Ambient
        originalLighting.Brightness = Lighting.Brightness
        originalLighting.ClockTime = Lighting.ClockTime
        
        Lighting.Ambient = Color3.new(1, 1, 1)
        Lighting.Brightness = 2
        Lighting.ClockTime = 12
    else
        if originalLighting.Ambient then
            Lighting.Ambient = originalLighting.Ambient
            Lighting.Brightness = originalLighting.Brightness
            Lighting.ClockTime = originalLighting.ClockTime
        end
    end
end

-- Main ESP loop with optimizations
local function startMainLoop()
    connections.mainLoop = RunService.Heartbeat:Connect(function()
        if tick() % 1.5 < 0.016 then -- Update every 1.5 seconds for better performance
            clearESP()
            local currentRooms = Workspace:FindFirstChild("CurrentRooms")
            if currentRooms then
                for _, room in pairs(currentRooms:GetChildren()) do
                    pcall(function()
                        scanRoom(room)
                    end)
                end
            end
        end
    end)
end

-- GUI Controls
local function toggleGUI()
    isMinimized = not isMinimized
    
    if isMinimized then
        tabFrame.Visible = false
        contentFrame.Visible = false
        saveBtn.Visible = false
        mainFrame.Size = UDim2.new(0, 380, 0, 30)
        minimizeBtn.Text = "+"
    else
        tabFrame.Visible = true
        contentFrame.Visible = true
        saveBtn.Visible = true
        mainFrame.Size = UDim2.new(0, 380, 0, 400)
        minimizeBtn.Text = "-"
    end
end

-- Connect GUI events
minimizeBtn.MouseButton1Click:Connect(toggleGUI)

closeBtn.MouseButton1Click:Connect(function()
    -- Save settings before closing
    saveSettings()
    
    clearESP()
    for _, connection in pairs(connections) do
        if connection then connection:Disconnect() end
    end
    if settings.fullbright then
        toggleFullbright(false)
    end
    screenGui:Destroy()
end)

-- Settings change handler
task.spawn(function()
    while screenGui.Parent do
        if settings.fullbright then
            toggleFullbright(true)
        else
            toggleFullbright(false)
        end
        task.wait(0.5)
    end
end)

-- Initialize everything
print("Initializing Fixed Doors Hack ESP system with Door + LeverForGate + Conservative Chest ESP...")
setupEntityProtection()
startMainLoop()

print("Doors Hack v2.8 - Complete Fixed Version successfully loaded!")
print("âœ… FEATURES INCLUDED:")
print("- âœ… Door ESP: Back and working (only shows closed doors)")
print("- âœ… LeverForGate ESP: Targets workspace.CurrentRooms[room].Assets.LeverForGate.Main")
print("- âœ… Conservative Chest ESP: Only highlights objects named exactly 'chest' or 'drawer'")
print("- âœ… Key ESP: Working in chests and rooms")
print("- âœ… Gold ESP: Working in chests and rooms") 
print("- âœ… All Item ESP: Lighter, Flashlight, Crucifix, Books, Vitamins, etc.")
print("- âœ… All Protection: Anti-Rush, Anti-Ambush, Anti-Seek, Anti-Screech, Anti-Eyes, Anti-Halt")
print("- âœ… Save System: Settings persist between sessions")
print("- âœ… Fullbright: Visual enhancement")
print("")
print("ðŸŽ¯ CHEST ESP NOW VERY SPECIFIC - will not spam false positives!")
print("ðŸšª DOOR ESP RESTORED - shows green highlight on closed doors!")
print("ðŸŽ® LEVERFORGATE ESP - shows bright magenta when available!")
print("ðŸ’¾ Settings auto-save when changed!")
